const express = require('express');
const cors = require('cors');
const path = require('path');
require('dotenv').config();

// Singleton DB connection
const dbSingleton = require('./dbSingleton'); 

// Route imports
const authRoutes = require('./src/routes/auth');
const productRoutes = require('./src/routes/products');
const userRoutes = require('./src/routes/users');
const promotionRoutes = require('./src/routes/promotions');
const orderRoutes = require('./src/routes/orders');
const adminRoutes = require('./src/routes/admin');

// Initialize Express app
const app = express();

// Core Middleware
app.use(cors({
  origin: 'http://localhost:3000',
  credentials: true,
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json());
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// API Routes
app.use('/api', authRoutes); // Mounts /login, /register, etc.
app.use('/api/products', productRoutes);
app.use('/api/profile', userRoutes); // Changed from /users to /profile to match original intent
app.use('/api/promotions', promotionRoutes);
app.use('/api/orders', orderRoutes);
app.use('/api/admin', adminRoutes);

// General API health check
app.get('/api/health', (req, res) => {
    res.json({ status: 'UP', message: 'API is running' });
});

// Serve frontend build in production
// This part should be adjusted based on your deployment strategy
app.use(express.static(path.join(__dirname, '../frontend/build')));
app.get('*', (req, res) => {
    res.sendFile(path.resolve(__dirname, '../frontend/build', 'index.html'));
});

// Start the server
const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
    console.log('MySQL connection pool created (promise-based).');
});
